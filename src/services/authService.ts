
import { supabase } from '@/integrations/supabase/client';
import { User, SignupFormData, LoginFormData, DatabaseProfile } from '@/types/auth';

export const authService = {
  async login(data: LoginFormData & { rememberMe?: boolean }): Promise<{ success: boolean; user?: User; message?: string }> {
    try {
      console.log('üîê [LOGIN] Starting login process for:', data.email);
      
      if (!data.email || !data.password) {
        console.error('‚ùå [LOGIN] Missing email or password');
        return { success: false, message: 'Email et mot de passe requis' };
      }

      const cleanEmail = data.email.toLowerCase().trim();
      
      // 1Ô∏è‚É£ - V√©rifier si l'utilisateur existe dans la table profiles
      console.log('üîç [LOGIN] Checking if user exists in profiles table');
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('email', cleanEmail)
        .single();
      
      // Cas 3Ô∏è‚É£ : Aucune demande de cr√©ation de compte
      if (profileError || !profile) {
        console.log('‚ùå [LOGIN] No account request found for this email');
        return { success: false, message: 'Aucune demande de cr√©ation de compte n\'a √©t√© faite avec cette adresse email.' };
      }
      
      // Cas 2Ô∏è‚É£ : Compte en attente de validation
      if (!profile.is_approved) {
        console.log('‚ùå [LOGIN] Account pending approval');
        return { success: false, message: 'Votre compte est en attente de validation, veuillez patienter.' };
      }
      
      console.log('‚úÖ [LOGIN] User exists and is approved, attempting Supabase auth...');
      
      // 2Ô∏è‚É£ - Tenter l'authentification Supabase
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email: cleanEmail,
        password: data.password,
      });
      
      // Cas 1Ô∏è‚É£ : Email ou mot de passe invalide
      if (authError || !authData.user) {
        console.error('‚ùå [LOGIN] Invalid credentials:', authError?.message);
        return { success: false, message: 'Adresse email ou mot de passe incorrect.' };
      }
      
      console.log('‚úÖ [LOGIN] Authentication successful');
      
      // 3Ô∏è‚É£ - V√©rification de s√©curit√© : s'assurer que l'ID correspond
      if (authData.user.id !== profile.id) {
        console.error('‚ùå [LOGIN] SECURITY BREACH - User ID mismatch, signing out');
        await supabase.auth.signOut();
        return { success: false, message: 'Erreur de s√©curit√©.' };
      }
      
      // 4Ô∏è‚É£ - Cr√©er l'objet utilisateur final
      const user: User = {
        id: profile.id,
        firstName: profile.first_name,
        lastName: profile.last_name,
        email: profile.email,
        phone: profile.phone,
        company: profile.company,
        isApproved: profile.is_approved,
        createdAt: profile.created_at,
      };
      
      return { success: true, user };
      
    } catch (error) {
      console.error('üí• [LOGIN] Unexpected error:', error);
      return { success: false, message: 'Erreur inattendue lors de la connexion.' };
    }
  },

  async signup(data: SignupFormData): Promise<{ success: boolean; message?: string }> {
    try {
      console.log('üìù [SIGNUP] Starting signup process for:', data.email);
      
      // Validate all required fields
      const requiredFields = ['firstName', 'lastName', 'email', 'phone', 'company', 'password'];
      const missingFields = requiredFields.filter(field => !data[field as keyof SignupFormData]?.trim());
      
      if (missingFields.length > 0) {
        console.error('‚ùå [SIGNUP] Missing required fields:', missingFields);
        return { success: false, message: 'Tous les champs sont obligatoires' };
      }
      
      const cleanEmail = data.email.toLowerCase().trim();
      console.log('üîç [SIGNUP] Checking if email exists in profiles table:', cleanEmail);
      
      // 1Ô∏è‚É£ - V√©rifier d'abord dans la table profiles
      const { data: existingProfiles, error: profileCheckError } = await supabase
        .from('profiles')
        .select('id, email, is_approved')
        .eq('email', cleanEmail)
        .limit(1);
      
      if (profileCheckError) {
        console.error('‚ùå [SIGNUP] Error checking existing email in profiles:', profileCheckError);
        return { success: false, message: 'Erreur lors de la v√©rification de l\'email' };
      }
      
      if (existingProfiles && existingProfiles.length > 0) {
        console.log('‚ùå [SIGNUP] Email already exists in profiles table');
        const existingProfile = existingProfiles[0];
        
        if (!existingProfile.is_approved) {
          return { 
            success: false, 
            message: 'Une demande de cr√©ation de compte a d√©j√† √©t√© faite avec cette adresse email et est en attente de validation. Veuillez patienter.' 
          };
        } else {
          return { 
            success: false, 
            message: 'Une demande de cr√©ation de compte a d√©j√† √©t√© faite avec cette adresse email.' 
          };
        }
      }
      
      console.log('üîç [SIGNUP] Email not found in profiles, checking auth.users via signup attempt...');
      
      // 2Ô∏è‚É£ - Tenter la cr√©ation via Supabase Auth pour d√©tecter les conflits
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: cleanEmail,
        password: data.password,
        options: {
          data: {
            first_name: data.firstName.trim(),
            last_name: data.lastName.trim(),
            phone: data.phone.trim(),
            company: data.company.trim(),
          }
        }
      });
      
      // üßπ CAS SP√âCIAL : Email existe dans auth.users mais pas dans profiles (utilisateur orphelin)
      if (authError && authError.message.includes('User already registered')) {
        console.log('üßπ [SIGNUP] NETTOYAGE - Email orphelin d√©tect√© dans auth.users, tentative de nettoyage...');
        
        // Essayer de r√©cup√©rer l'utilisateur orphelin et le supprimer
        try {
          // Tenter une connexion temporaire pour r√©cup√©rer l'ID de l'utilisateur orphelin
          const { data: tempAuthData } = await supabase.auth.signInWithPassword({
            email: cleanEmail,
            password: data.password,
          });
          
          if (tempAuthData.user) {
            console.log('üóëÔ∏è [SIGNUP] Suppression de l\'utilisateur orphelin:', tempAuthData.user.id);
            
            // Supprimer l'utilisateur orphelin de auth.users
            const { error: deleteError } = await supabase.auth.admin.deleteUser(tempAuthData.user.id);
            
            if (deleteError) {
              console.error('‚ùå [SIGNUP] Erreur lors de la suppression de l\'utilisateur orphelin:', deleteError);
            } else {
              console.log('‚úÖ [SIGNUP] Utilisateur orphelin supprim√©, retry signup...');
              
              // D√©connecter la session temporaire
              await supabase.auth.signOut();
              
              // Retry la cr√©ation apr√®s nettoyage
              const { data: retryAuthData, error: retryAuthError } = await supabase.auth.signUp({
                email: cleanEmail,
                password: data.password,
                options: {
                  data: {
                    first_name: data.firstName.trim(),
                    last_name: data.lastName.trim(),
                    phone: data.phone.trim(),
                    company: data.company.trim(),
                  }
                }
              });
              
              if (retryAuthError || !retryAuthData.user) {
                console.error('‚ùå [SIGNUP] Retry failed apr√®s nettoyage:', retryAuthError);
                return { 
                  success: false, 
                  message: 'Erreur technique lors de la cr√©ation du compte apr√®s nettoyage. Veuillez r√©essayer.' 
                };
              }
              
              // Continuer avec le nouveau compte cr√©√©
              const newAuthData = retryAuthData;
              console.log('‚úÖ [SIGNUP] Compte recr√©√© avec succ√®s apr√®s nettoyage:', newAuthData.user.id);
              
              // 3Ô∏è‚É£ - Cr√©er l'entr√©e dans profiles
              const profileData = {
                id: newAuthData.user.id,
                first_name: data.firstName.trim(),
                last_name: data.lastName.trim(),
                email: cleanEmail,
                phone: data.phone.trim(),
                company: data.company.trim(),
                is_approved: false
              };
              
              console.log('üìù [SIGNUP] Creating profile entry after cleanup:', profileData);
              
              const { data: profileResult, error: profileError } = await supabase
                .from('profiles')
                .insert(profileData)
                .select()
                .single();
              
              if (profileError) {
                console.error('‚ùå [SIGNUP] Profile creation error after cleanup:', profileError);
                
                // Si la cr√©ation du profil √©choue, supprimer l'utilisateur auth cr√©√©
                console.log('üîÑ [SIGNUP] Cleaning up auth user due to profile creation failure');
                await supabase.auth.admin.deleteUser(newAuthData.user.id);
                
                return { 
                  success: false, 
                  message: 'Erreur lors de la cr√©ation du profil utilisateur. Veuillez r√©essayer.' 
                };
              }
              
              console.log('‚úÖ [SIGNUP] Profile created successfully after cleanup:', profileResult);
              
              // D√©connecter l'utilisateur imm√©diatement car il doit √™tre approuv√©
              await supabase.auth.signOut();
              
              console.log('üéâ [SIGNUP] Signup complete after cleanup - user pending approval');
              
              return { 
                success: true, 
                message: 'Votre compte a √©t√© cr√©√© avec succ√®s ! Il sera activ√© apr√®s validation par notre √©quipe. Vous recevrez un email de confirmation.' 
              };
            }
          }
        } catch (cleanupError) {
          console.error('üí• [SIGNUP] Erreur lors du nettoyage:', cleanupError);
        }
        
        // Si le nettoyage √©choue, retourner le message d'erreur original
        return { 
          success: false, 
          message: 'Cette adresse email est d√©j√† utilis√©e. Si vous avez un compte, veuillez vous connecter. Sinon, contactez le support.' 
        };
      }
      
      if (authError) {
        console.error('‚ùå [SIGNUP] Auth signup error:', authError);
        return { 
          success: false, 
          message: 'Erreur lors de la cr√©ation du compte : ' + authError.message 
        };
      }
      
      if (!authData.user) {
        console.error('‚ùå [SIGNUP] No user returned from auth signup');
        return { 
          success: false, 
          message: 'Erreur lors de la cr√©ation du compte. Aucun utilisateur cr√©√©.' 
        };
      }
      
      console.log('‚úÖ [SIGNUP] Auth user created successfully:', authData.user.id);
      
      // 3Ô∏è‚É£ - Cr√©er l'entr√©e dans profiles
      const profileData = {
        id: authData.user.id,
        first_name: data.firstName.trim(),
        last_name: data.lastName.trim(),
        email: cleanEmail,
        phone: data.phone.trim(),
        company: data.company.trim(),
        is_approved: false
      };
      
      console.log('üìù [SIGNUP] Creating profile entry:', profileData);
      
      const { data: profileResult, error: profileError } = await supabase
        .from('profiles')
        .insert(profileData)
        .select()
        .single();
      
      if (profileError) {
        console.error('‚ùå [SIGNUP] Profile creation error:', profileError);
        
        // Si la cr√©ation du profil √©choue, supprimer l'utilisateur auth cr√©√©
        console.log('üîÑ [SIGNUP] Cleaning up auth user due to profile creation failure');
        await supabase.auth.admin.deleteUser(authData.user.id);
        
        return { 
          success: false, 
          message: 'Erreur lors de la cr√©ation du profil utilisateur. Veuillez r√©essayer.' 
        };
      }
      
      console.log('‚úÖ [SIGNUP] Profile created successfully:', profileResult);
      
      // D√©connecter l'utilisateur imm√©diatement car il doit √™tre approuv√©
      await supabase.auth.signOut();
      
      console.log('üéâ [SIGNUP] Signup complete - user pending approval');
      
      return { 
        success: true, 
        message: 'Votre compte a √©t√© cr√©√© avec succ√®s ! Il sera activ√© apr√®s validation par notre √©quipe. Vous recevrez un email de confirmation.' 
      };
      
    } catch (error) {
      console.error('üí• [SIGNUP] Unexpected error:', error);
      return { 
        success: false, 
        message: 'Une erreur inattendue est survenue lors de la cr√©ation du compte' 
      };
    }
  }
};
